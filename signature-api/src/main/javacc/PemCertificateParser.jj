PARSER_BEGIN(PemCertificateParser)
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.amber.signature.rsa;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.security.KeyFactory;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import org.apache.commons.codec.binary.Base64OutputStream;

/**
 * PEM private/public certificates parser.
 *
 * @version $Id$
 */
final class PemCertificateParser {

    private static final String RSA_NAME = "RSA";

    private static KeyFactory getRsaKeyFactory() {
        try {
            return KeyFactory.getInstance(RSA_NAME);
        } catch (Exception e) {
            throw new RuntimeException("Impossible to instantiate the RSA KeyFactory", e);
        }
    }

    private final KeyFactory keyFactory = getRsaKeyFactory();

    private final ByteArrayOutputStream baos = new ByteArrayOutputStream();

    private final Base64OutputStream output = new Base64OutputStream(baos, false);

}

PARSER_END(PemCertificateParser)

SKIP : {
    <[" ","\t","\n","\r"]>
}

TOKEN : {
    <BEGIN_PRIVATE_KEY : "-----BEGIN RSA PRIVATE KEY-----">
    | <END_PRIVATE_KEY : "-----END RSA PRIVATE KEY-----">
    | <BEGIN_CERTIFICATE : "-----BEGIN PUBLIC KEY-----">
    | <END_CERTIFICATE : "-----END PUBLIC KEY-----">
    | <CERTIFICATE_CONTENT : (["a"-"z","A"-"Z","0"-"9","+","/","="])+>
}

public RSAPrivateKey parsePrivateKey() throws Exception : { }
{
    <BEGIN_PRIVATE_KEY> [ certificateContent() ]  <END_PRIVATE_KEY> <EOF> {
        try {
            PKCS8EncodedKeySpec privSpec = new PKCS8EncodedKeySpec(this.baos.toByteArray());
            return (RSAPrivateKey) this.keyFactory.generatePrivate(privSpec);
        } catch (Exception e) {
            throw e;
        } finally {
            try {
                this.output.close();
                this.baos.close();
            } catch (IOException e) {
                // close quietly
            }
        }
    }
}

public RSAPublicKey parsePublicCertificate() throws Exception : { }
{
    <BEGIN_CERTIFICATE> [ certificateContent() ]  <END_CERTIFICATE> <EOF> {
        try {
            X509EncodedKeySpec pubSpec = new X509EncodedKeySpec(this.baos.toByteArray());
            return (RSAPublicKey) this.keyFactory.generatePublic(pubSpec);
        } catch (Exception e) {
            throw e;
        } finally {
            try {
                this.output.close();
                this.baos.close();
            } catch (IOException e) {
                // close quietly
            }
        }
    }
}

private void certificateContent() : {}
{
    content() [ certificateContent() ]
}

private void content() : { Token t; }
{
    t=<CERTIFICATE_CONTENT> {
        byte[] buffer = t.toString().getBytes();
        try {
            this.output.write(buffer, 0, buffer.length);
        } catch (IOException e) {
            throw new ParseException("Fatal protocol error: " + e.getMessage());
        }
    }
}
